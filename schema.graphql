type GameRow {
  currentDate: LocalDate!
  from: LocalDate!
  id: Int!
  initialWalletValue: Int!
  private: Boolean!
  to: LocalDate!
  turnDuration: Int!
}

scalar LocalDate

type LoginInfo {
  tokens: Tokens!
  userInfo: User!
}

type Marking {
  close: Float!
  high: Float!
  low: Float!
  open: Float!
  ticker: String!
  volume: Int!
}

type MarkingAtDay {
  date: LocalDate!
  marking: Marking!
}

type Mutation {
  createGame(endDate: LocalDate!, isPrivate: Boolean!, startDate: LocalDate!, stocks: [String!]!, turnDuration: Int!, userIds: [Int!], walletValue: Int!): Int!
  createUser(email: String!, password: String!, userName: String!): LoginInfo!
  loginByMail(email: String!, password: String!): LoginInfo!
  loginByUserName(password: String!, userName: String!): LoginInfo!
  refreshToken(refreshToken: String!): LoginInfo!
}

type Query {
  getJoinableGames: [GameRow!]!
  getMarkings(endDate: LocalDate, startDate: LocalDate, stock: String!, ticker: String!): [MarkingAtDay!]!
  stocksSummary(stocks: [String!]): [StockSummary!]!
}

type SecurityInfo {
  endDate: LocalDate!
  startDate: LocalDate!
  ticker: String!
}

type StockSummary {
  endDate: LocalDate!
  name: String!
  readableName: String!
  securities: [SecurityInfo!]!
  startDate: LocalDate!
}

type Tokens {
  accessToken: String!
  refreshToken: String!
}

type User {
  email: String!
  id: Int!
  userName: String!
}
